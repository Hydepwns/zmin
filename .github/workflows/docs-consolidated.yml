name: Documentation Generation & Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**/*.zig'
      - 'docs/api-reference.yaml'
      - 'scripts/generate-api-docs.zig'
      - 'docs/**'
      - 'assets/**'
      - 'content/**'
      - 'config.yaml'
      - 'layouts/**'
      - 'static/**'
      - 'go.mod'
      - 'go.sum'
      - 'build/**'
      - '.gitignore'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**/*.zig'
      - 'docs/api-reference.yaml'
      - 'assets/**'
      - 'content/**'
      - 'config.yaml'
      - 'build/**'
      - '.github/workflows/**'
  schedule:
    # Run daily at 2 AM UTC to catch any missed updates
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force regenerate all documentation'
        required: false
        default: false
        type: boolean

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  DOCS_DIR: docs
  SCRIPTS_DIR: scripts
  GENERATED_SPEC: docs/api-reference-generated.json
  GENERATED_HTML: docs/api-reference-generated.html

jobs:
  # Read versions inline instead of using reusable workflow
  versions:
    runs-on: ubuntu-latest
    outputs:
      zig-version: ${{ steps.versions.outputs.zig }}
      zmin-version: ${{ steps.versions.outputs.zmin }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/versions.json

      - name: Read versions
        id: versions
        run: |
          echo "zig=$(jq -r '.zig' .github/versions.json)" >> $GITHUB_OUTPUT
          echo "zmin=$(jq -r '.zmin' .github/versions.json)" >> $GITHUB_OUTPUT

  # Generate API documentation
  generate-api-docs:
    runs-on: ubuntu-latest
    needs: versions
    outputs:
      docs-generated: ${{ steps.check-changes.outputs.has-changes }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ needs.versions.outputs.zig-version }}

      - name: Cache Zig artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/zig
            zig-cache
          key: ${{ runner.os }}-zig-docs-${{ hashFiles('scripts/generate-api-docs.zig') }}
          restore-keys: |
            ${{ runner.os }}-zig-docs-

      - name: Build documentation generator
        run: |
          echo "Building API documentation generator..."
          zig build-exe scripts/generate-api-docs.zig -O ReleaseFast

      - name: Generate API documentation from source
        run: |
          echo "Generating API documentation from Zig source files..."
          ./generate-api-docs src ${{ env.GENERATED_SPEC }}

          if [ ! -f "${{ env.GENERATED_SPEC }}" ]; then
            echo "Error: Generated API spec not found!"
            exit 1
          fi

          echo "Generated API spec size: $(stat -c%s ${{ env.GENERATED_SPEC }}) bytes"

      - name: Validate generated OpenAPI spec
        run: |
          echo "Validating generated OpenAPI specification..."

          # Install OpenAPI validator
          npm install -g @apidevtools/swagger-cli

          # Validate the generated spec
          swagger-cli validate ${{ env.GENERATED_SPEC }}

          echo "âœ… OpenAPI specification is valid"

      - name: Check for documentation changes
        id: check-changes
        run: |
          # Check if there are any changes to commit
          if git diff --quiet; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No documentation changes detected"
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Documentation changes detected"
          fi

      - name: Commit documentation changes
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ${{ env.GENERATED_SPEC }}
          git commit -m "docs: auto-generate API documentation [skip ci]"
          git push

  # Build Hugo site
  build-hugo:
    runs-on: ubuntu-latest
    needs: [versions, generate-api-docs]
    outputs:
      hugo-built: ${{ steps.build-check.outputs.has-changes }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Ensure content directory exists
        run: |
          # Create content directory if it doesn't exist
          mkdir -p content
          # Copy content from assets if it exists
          if [ -d "assets/content" ]; then
            cp -r assets/content/* content/ 2>/dev/null || true
          fi

      - name: Build Hugo site
        run: |
          # Don't try to initialize modules if go.mod already exists
          if [ ! -f "go.mod" ]; then
            hugo mod init zmin-docs
          fi
          hugo mod get github.com/panr/hugo-theme-terminal
          hugo --minify

      - name: Copy generated API docs to Hugo static
        run: |
          # Copy generated API docs to Hugo static directory
          mkdir -p static/api
          cp ${{ env.GENERATED_SPEC }} static/api/
          cp ${{ env.GENERATED_HTML }} static/api/ 2>/dev/null || true

      - name: Check Hugo build output
        id: build-check
        run: |
          if [ -d "public" ] && [ "$(ls -A public)" ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Hugo site built successfully"
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "Hugo build failed or empty"
          fi

  # Deploy to GitHub Pages
  deploy:
    name: Deploy to GitHub Pages
    needs: [versions, generate-api-docs, build-hugo]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Debug - Show current directory
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la

      - name: Ensure content directory exists
        run: |
          # Create content directory if it doesn't exist
          mkdir -p content
          # Copy content from assets if it exists
          if [ -d "assets/content" ]; then
            cp -r assets/content/* content/ 2>/dev/null || true
          fi
          echo "Content directory contents:"
          ls -la content/

      - name: Build Hugo site
        run: |
          # Don't try to initialize modules if go.mod already exists
          if [ ! -f "go.mod" ]; then
            hugo mod init zmin-docs
          fi
          hugo mod get github.com/panr/hugo-theme-terminal
          hugo --minify
          echo "Hugo build completed. Public directory contents:"
          ls -la public/

      - name: Copy generated API docs to Hugo static
        run: |
          # Copy generated API docs to Hugo static directory
          mkdir -p static/api
          cp ${{ env.GENERATED_SPEC }} static/api/ 2>/dev/null || true
          cp ${{ env.GENERATED_HTML }} static/api/ 2>/dev/null || true

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
