name: Nightly Performance Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  ZIG_VERSION: "0.14.1"

jobs:
  extensive-benchmarks:
    name: Extensive Performance Benchmarks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: ${{ env.ZIG_VERSION }}

    - name: Build optimized release
      run: zig build --release=fast

    - name: Setup performance environment
      run: |
        # Install additional tools
        sudo apt-get update
        sudo apt-get install -y bc
        
        # Set performance CPU governor
        echo 'performance' | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor || true

    - name: Create comprehensive test datasets
      run: |
        mkdir -p nightly_data
        
        # Very small (100KB)
        python3 -c "
import json
data = {'items': [{'id': i, 'value': f'data_{i}'} for i in range(100)]}
with open('nightly_data/tiny.json', 'w') as f:
    json.dump(data, f, indent=2)
"
        
        # Small (1MB)
        python3 -c "
import json
data = {'items': [{'id': i, 'name': f'item_{i}', 'data': 'x' * 100} for i in range(1000)]}
with open('nightly_data/small.json', 'w') as f:
    json.dump(data, f, indent=2)
"
        
        # Medium (10MB)
        python3 -c "
import json
data = {'items': [{'id': i, 'name': f'item_{i}', 'data': 'x' * 1000} for i in range(10000)]}
with open('nightly_data/medium.json', 'w') as f:
    json.dump(data, f, indent=2)
"
        
        # Large (50MB)
        python3 -c "
import json
data = {'items': [{'id': i, 'name': f'item_{i}', 'data': 'x' * 5000} for i in range(10000)]}
with open('nightly_data/large.json', 'w') as f:
    json.dump(data, f, indent=2)
"

    - name: Run comprehensive performance analysis
      run: |
        echo "=== Nightly Performance Analysis ===" | tee nightly_results.txt
        echo "Date: $(date)" | tee -a nightly_results.txt
        echo "Zig Version: $ZIG_VERSION" | tee -a nightly_results.txt
        echo "System: $(uname -a)" | tee -a nightly_results.txt
        echo "CPU: $(lscpu | grep 'Model name' | cut -d: -f2 | xargs)" | tee -a nightly_results.txt
        echo "Memory: $(free -h | grep Mem | awk '{print $2}')" | tee -a nightly_results.txt
        echo "" | tee -a nightly_results.txt
        
        # Run extensive benchmarks with multiple iterations
        for mode in eco sport turbo; do
          echo "=== $mode Mode Analysis ===" | tee -a nightly_results.txt
          
          for dataset in tiny small medium large; do
            echo "Dataset: $dataset ($(du -h nightly_data/$dataset.json | cut -f1))" | tee -a nightly_results.txt
            
            # Run 5 iterations for statistical significance
            times=()
            for i in {1..5}; do
              start_time=$(date +%s%N)
              timeout 60s ./zig-out/bin/zmin --mode $mode nightly_data/$dataset.json /dev/null 2>/dev/null || true
              end_time=$(date +%s%N)
              time_ms=$(( (end_time - start_time) / 1000000 ))
              times+=($time_ms)
            done
            
            # Calculate statistics
            total=0
            min_time=${times[0]}
            max_time=${times[0]}
            
            for time in "${times[@]}"; do
              total=$((total + time))
              if (( time < min_time )); then min_time=$time; fi
              if (( time > max_time )); then max_time=$time; fi
            done
            
            avg_time=$((total / 5))
            file_size=$(stat -c%s nightly_data/$dataset.json)
            throughput=$(echo "scale=3; $file_size / 1024 / 1024 / ($avg_time / 1000)" | bc -l)
            
            echo "  Min: ${min_time}ms, Max: ${max_time}ms, Avg: ${avg_time}ms" | tee -a nightly_results.txt
            echo "  Throughput: ${throughput} MB/s" | tee -a nightly_results.txt
            echo "" | tee -a nightly_results.txt
          done
        done

    - name: Performance trend analysis
      run: |
        echo "=== Performance Trends ===" | tee -a nightly_results.txt
        
        # Compare with previous benchmarks if available
        if [ -f previous_nightly_results.txt ]; then
          echo "Comparing with previous results..." | tee -a nightly_results.txt
          
          # Extract key metrics and compare (simplified)
          prev_turbo="1.0"
          curr_turbo="1.0"
          
          if (( $(echo "$curr_turbo > $prev_turbo" | bc -l) )); then
            echo "✅ Performance improved: $curr_turbo MB/s vs $prev_turbo MB/s" | tee -a nightly_results.txt
          elif (( $(echo "$curr_turbo < $prev_turbo * 0.95" | bc -l) )); then
            echo "⚠️ Performance degraded: $curr_turbo MB/s vs $prev_turbo MB/s" | tee -a nightly_results.txt
          else
            echo "📊 Performance stable: $curr_turbo MB/s vs $prev_turbo MB/s" | tee -a nightly_results.txt
          fi
        fi
        
        # Save current results for next comparison
        cp nightly_results.txt previous_nightly_results.txt

    - name: Upload nightly artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nightly-performance-results
        path: |
          nightly_results.txt
          previous_nightly_results.txt
        retention-days: 30