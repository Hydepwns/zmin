name: Performance Regression Detection

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  BENCHMARKS_DIR: benchmarks/datasets
  SCRIPTS_DIR: scripts
  ZIG_OUT_DIR: zig-out/bin

jobs:
  versions:
    uses: ./.github/workflows/read-versions.yml

  performance-test:
    name: Performance Regression Test
    needs: versions
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: ${{ needs.versions.outputs.zig-version }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bc jq

    - name: Cache benchmark datasets
      uses: actions/cache@v4
      with:
        path: ${{ env.BENCHMARKS_DIR }}
        key: benchmark-datasets-v1

    - name: Build optimized binaries
      run: |
        # Build current branch
        zig build --release=fast
        mv zig-out/bin/zmin zmin-current
        
        # Build baseline (main branch)
        git checkout origin/main
        zig build --release=fast
        mv zig-out/bin/zmin zmin-baseline
        
        # Return to PR branch
        git checkout -

    - name: Run performance benchmarks
      run: |
        # Source common functions
        source ${{ env.SCRIPTS_DIR }}/common.sh
        
        # Setup benchmark datasets
        setup_benchmark_datasets
        
        echo "## Performance Comparison Report" > performance-report.md
        echo "" >> performance-report.md
        echo "**Date**: $(date)" >> performance-report.md
        echo "**Commit**: ${{ github.sha }}" >> performance-report.md
        echo "" >> performance-report.md
        
        # Initialize JSON results
        echo '{"results": [' > benchmark-results.json
        
        # Run benchmarks for each dataset
        for dataset in small medium large; do
          echo "Testing with $dataset dataset..."
          
          # Baseline performance
          baseline_time=$(./${{ env.SCRIPTS_DIR }}/benchmark-single.sh ./zmin-baseline ${{ env.BENCHMARKS_DIR }}/$dataset.json)
          
          # Current performance
          current_time=$(./${{ env.SCRIPTS_DIR }}/benchmark-single.sh ./zmin-current ${{ env.BENCHMARKS_DIR }}/$dataset.json)
          
          # Calculate change and format result
          change=$(calculate_percentage_change $baseline_time $current_time)
          result=$(format_performance_result $dataset $change)
          echo "$result" >> performance-report.md
          
          # Emit warning if regression detected
          if [[ "$result" == *"${FAILURE_ICON}"* ]]; then
            echo "::warning::Performance regression detected with $dataset dataset: +${change}%"
          fi
          
          # Add to JSON results
          if [ "$dataset" != "large" ]; then
            echo "{\"dataset\": \"$dataset\", \"baseline\": $baseline_time, \"current\": $current_time, \"change\": $change}," >> benchmark-results.json
          else
            echo "{\"dataset\": \"$dataset\", \"baseline\": $baseline_time, \"current\": $current_time, \"change\": $change}" >> benchmark-results.json
          fi
        done
        
        # Close JSON
        echo ']}'>> benchmark-results.json

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('performance-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

    - name: Upload performance artifacts
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          performance-report.md
          benchmark-results.json

    - name: Check for regressions
      run: |
        # Source common functions to get FAILURE_ICON
        source ${{ env.SCRIPTS_DIR }}/common.sh
        
        # Fail if any significant regressions detected
        if grep -q "${FAILURE_ICON}" performance-report.md; then
          echo "Performance regressions detected!"
          cat performance-report.md
          exit 1
        fi