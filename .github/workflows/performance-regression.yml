name: Performance Regression Detection

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**/*.zig'
      - 'build.zig'
      - 'build.zig.zon'
      - 'tests/**/*.zig'
      - 'tools/scripts/**/*.sh'
      - 'tools/benchmarks/**'
  workflow_dispatch:
    inputs:
      force_regression_check:
        description: 'Force performance regression check'
        required: false
        default: false
        type: boolean

env:
  BENCHMARKS_DIR: tools/benchmarks/datasets
  SCRIPTS_DIR: tools/scripts
  ZIG_OUT_DIR: zig-out/bin

jobs:
  versions:
    runs-on: ubuntu-latest
    outputs:
      zig-version: ${{ steps.versions.outputs.zig }}
      zmin-version: ${{ steps.versions.outputs.zmin }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/versions.json

      - name: Read versions
        id: versions
        run: |
          echo "zig=$(jq -r '.zig' .github/versions.json)" >> $GITHUB_OUTPUT
          echo "zmin=$(jq -r '.zmin' .github/versions.json)" >> $GITHUB_OUTPUT

  performance-test:
    name: Performance Regression Test
    needs: versions
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.force_regression_check == true ||
      contains(github.event.pull_request.labels.*.name, 'performance') ||
      contains(github.event.pull_request.labels.*.name, 'regression-check')

    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: ${{ needs.versions.outputs.zig-version }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bc jq

    - name: Cache benchmark datasets
      uses: actions/cache@v4
      with:
        path: ${{ env.BENCHMARKS_DIR }}
        key: benchmark-datasets-v1

    - name: Build optimized binaries
      run: |
        # Build current branch
        zig build --release=fast
        mv zig-out/bin/zmin zmin-current

        # Build baseline (main branch)
        git checkout origin/main
        zig build --release=fast
        mv zig-out/bin/zmin zmin-baseline

        # Return to PR branch
        git checkout -

    - name: Run performance benchmarks
      run: |
        # Source common functions
        source ${{ env.SCRIPTS_DIR }}/common.sh

        # Setup benchmark datasets
        setup_benchmark_datasets

        echo "## Performance Comparison Report" > performance-report.md
        echo "" >> performance-report.md
        echo "**Date**: $(date)" >> performance-report.md
        echo "**Commit**: ${{ github.sha }}" >> performance-report.md
        echo "**Branch**: ${{ github.head_ref }}" >> performance-report.md
        echo "" >> performance-report.md

        # Initialize JSON results
        echo '{"results": [' > benchmark-results.json

        # Run benchmarks for each dataset
        for dataset in small medium large; do
          echo "Testing with $dataset dataset..."

          # Baseline performance
          baseline_time=$(./${{ env.SCRIPTS_DIR }}/benchmark-single.sh ./zmin-baseline ${{ env.BENCHMARKS_DIR }}/$dataset.json)

          # Current performance
          current_time=$(./${{ env.SCRIPTS_DIR }}/benchmark-single.sh ./zmin-current ${{ env.BENCHMARKS_DIR }}/$dataset.json)

          # Calculate percentage change
          change=$(echo "scale=2; (($current_time - $baseline_time) / $baseline_time) * 100" | bc -l)

          # Format result
          format_performance_result "$dataset" "$change" >> performance-report.md

          # Add to JSON results
          echo "{\"dataset\": \"$dataset\", \"baseline\": $baseline_time, \"current\": $current_time, \"change\": $change}," >> benchmark-results.json
        done

        # Close JSON array
        echo "]" >> benchmark-results.json
        echo "}" >> benchmark-results.json

        echo "" >> performance-report.md
        echo "---" >> performance-report.md
        echo "*This report was generated automatically by the performance regression detection workflow.*" >> performance-report.md

    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('performance-report.md', 'utf8');

          // Check if this is a PR
          if (context.eventName === 'pull_request') {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
          }

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-regression-results
        path: |
          performance-report.md
          benchmark-results.json
        retention-days: 30
